// Code generated by go-bindata. DO NOT EDIT.
// sources:
// html/index.html (15.463kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x3b\x6b\x93\xdb\x36\x92\xdf\xfd\x2b\x10\x6c\x6d\x59\x53\x11\x21\x3e\xf5\x1a\x69\x36\x8e\x9d\xc4\xb9\xb3\x63\x97\xed\x38\x75\x17\xa7\xa6\x20\x12\xa2\x98\x01\x01\x16\x01\x8d\x24\xbb\xe6\xbf\x5f\x01\xe0\x03\xa4\xa4\xf1\x38\xb7\x77\xf1\x6e\xc5\x22\x1b\xfd\x06\xba\xd1\x68\x62\x16\xdf\x3c\x7b\xf5\xf4\xdd\x7f\xbd\xfe\x01\x6c\x64\x4e\xaf\x1e\x2d\xcc\xcf\xa3\xc5\x86\xe0\xe4\xea\x11\x00\x0b\x99\x49\x4a\xae\x72\xb1\x16\xbe\xeb\xbb\x4e\xca\x47\xb7\xeb\x32\xc7\xc5\x62\x64\x46\x14\x4e\x4e\x24\x06\x0c\xe7\x64\x09\x71\x51\x50\xe2\xe4\x7c\x95\x51\xe2\xec\xc8\xca\xc1\x45\xe1\xc4\xb8\xc0\x2b\x4a\x20\x88\x39\x93\x84\xc9\x25\x3c\x10\x01\x1f\x44\x2a\x24\x96\x5b\xe1\xac\x70\xe9\x08\x79\xe8\xf0\x58\x51\x1c\xdf\x3c\x8c\x8b\x56\xd5\x22\x7d\xff\xe3\x9b\x97\xb8\x30\xb4\x34\x63\x37\xa0\x24\x74\x09\xb3\x98\x33\x08\xe4\xa1\x20\x4b\x98\xe5\x38\x25\xa3\x82\xa5\x10\x6c\x4a\xb2\x5e\xc2\x04\x4b\x3c\x6f\xa0\x97\x2b\x2c\xc8\x38\x1c\x66\xef\xbf\x7f\xf5\x66\xe7\xfe\xe7\x4f\x29\x5f\xf6\xd9\x69\x7d\xc5\x86\x10\x59\xf3\x18\x29\x6b\xb2\x78\x44\x09\x5e\x53\x22\x51\x2c\x04\x04\xa3\x96\xac\x8b\x25\x71\x46\x77\x19\x4b\x50\x9e\x31\x83\xda\x67\xab\x29\x45\x5c\x66\x85\x04\xa2\x8c\x8f\x05\xfc\x29\xe0\xd5\x62\x64\x30\x3e\x8b\x5c\x72\x89\x25\x49\x5e\xe2\xf2\x86\x94\x27\x48\x95\xdc\xca\x3b\x92\xec\xe5\x48\xa9\xa4\x46\x80\x5e\x3b\x43\xfd\xb4\xe2\xc9\x01\x7c\xd2\x8f\x00\x6c\x48\x96\x6e\xe4\x1c\x78\xae\xfb\xcf\xcb\x0a\x96\xe3\x32\xcd\xd8\x1c\xb8\x35\xa0\xc0\x49\x92\xb1\xb4\x81\xdc\x3d\x3a\x66\x94\x64\xa2\xa0\xf8\x30\x07\x6b\x4a\xf6\x35\xa1\x7a\x76\x92\xac\x24\xb1\xcc\x38\x9b\x83\x98\xd3\x6d\xce\x3a\x4c\xfe\x91\xe3\xa2\x61\xb2\xc2\xf1\x4d\x5a\xf2\x2d\x4b\x9c\x98\x53\x5e\xce\x41\x5a\xe2\x43\x87\x5b\x5a\xf2\xdd\x1c\x78\x5d\x1e\x94\xe3\xc4\xb1\x19\x15\x5c\x64\x46\x24\x5e\x09\x4e\xb7\x92\xd4\x4c\x56\x5c\x4a\x9e\x5b\xc6\x51\xb2\x96\xd6\xeb\x47\x27\x63\x09\xd9\xcf\x81\x17\x1e\x9b\x8f\x22\x92\xd7\xd0\x4a\x41\xbd\xc2\x2f\xcf\xea\x5f\x92\xa4\x51\x9f\x33\xe9\x88\xec\x23\x99\x03\xbf\x65\xa3\xa1\xbb\x6a\x16\x56\x9c\x26\x5d\xcb\x24\xa1\xa4\xe0\xa5\x74\x0a\x5e\x6c\x0b\x60\x59\xd8\x2a\x65\x71\x3b\x9a\x3a\xb5\x0a\x1c\x4c\xb3\x54\x79\x9f\x30\x49\xca\xcf\xf0\xa7\x78\x45\x68\x5f\x8a\x53\x1a\xfd\x2c\x59\x15\x03\x54\xad\x4c\x47\xf2\x56\x37\xa3\x85\x02\xcd\x81\x77\x8e\xc0\x4c\x44\x9f\xa6\x9e\x9e\xe0\x1c\x99\xd6\xa4\x4f\x55\xa9\x67\xc9\x02\x60\x31\xd2\xd1\x70\xf5\xa8\x8d\x29\x13\x09\x70\x2b\x08\x10\xb2\xcc\x62\x09\x2f\x0d\x77\x4a\x24\xd8\x6c\x2b\xd7\xab\x97\x1c\x17\xf6\x8b\x8a\xb6\xfe\xfb\xbb\xca\x73\x7d\xf8\xcf\x31\x67\x2d\x4c\xbb\xb5\x7d\xdd\x09\x6b\x88\x62\x46\xae\x7b\x08\xf5\x7c\xf4\xe1\x6b\x4e\x29\xdf\x5d\x6b\x1a\xb0\x04\x6b\x4c\x05\x69\x47\x29\x16\xf2\xba\xd4\x84\x60\x09\x3e\xdd\xb5\x23\xe2\x36\x7d\xad\x68\x94\x56\x6f\x65\x99\xb1\x14\x2c\x2b\xdf\x3d\x5e\xfc\x6b\x9f\x53\x70\x4b\x4a\x91\x71\xb6\x84\x1e\x72\x21\x20\x2c\xe6\x6a\xc6\x97\xf0\xd7\x77\x3f\x3a\x53\x08\x84\xc4\x2c\xc1\x94\x33\xb2\x84\x8c\xc3\x7f\x5d\x2d\xc4\x6d\x0a\xf6\x39\x65\x62\x09\x37\x52\x16\xf3\xd1\x68\xb7\xdb\xa1\x5d\x80\x78\x99\x8e\x7c\xd7\x75\x47\xe2\x56\xa5\x64\xbd\xa6\x97\xd0\x0f\x67\x68\x1a\x42\xb0\xcb\x12\xb9\x51\xaf\x53\xe4\x47\xb0\x2b\xf6\x4a\xef\x0e\x2a\x7d\x83\x2c\x59\xc2\xfa\x65\x06\x47\x57\x8b\x02\xcb\x8d\x86\xaa\x87\x68\xe2\x87\x10\x24\x4b\xf8\x12\xf8\xe1\x04\x45\x5e\xe8\x86\x43\x2f\xf2\x51\xe8\xfa\xe3\x31\xf0\x82\x19\x72\xa3\xc9\xd4\x1b\x4e\x3c\x34\x75\xdd\x59\x38\x06\x31\x70\xd1\xd4\xf5\xc7\xd3\xa1\xe3\xf9\x28\x8c\xbc\x69\x18\x01\x0f\x05\x7e\x38\x09\x86\x4e\xe8\x22\x3f\x1a\x2b\x5a\x17\x4d\xa3\x50\x61\x85\x11\x0a\xbd\x49\x34\x9b\x01\x27\x40\xb3\xd0\x0d\xc2\xa1\x13\x06\xc8\x1f\x8f\xc3\xb1\x0f\x9c\xc0\x43\x7e\xe0\x7a\xd3\xa1\xe3\x87\x68\x1c\xb8\x9e\x37\x0b\x34\x34\x9c\x06\x41\x34\x74\x22\x14\xf8\x6e\x30\x9e\x00\xc7\x45\xee\x78\x16\x0c\x23\xe4\x4f\xbd\x60\xec\x01\xc7\x43\xae\x17\xb9\xfe\x30\xf0\x51\x34\x9b\x06\xd3\xa9\x02\x79\x6e\x38\xf1\x86\x91\x8b\xa6\xc1\x78\xec\xfb\xe0\x85\x8a\xb2\x69\xe8\x4f\xbc\xc9\xd0\x8b\x42\x14\x4c\xa2\xb1\x0f\xdc\xa1\x37\x75\x91\x37\x8b\x26\x11\xa0\xc0\xf3\x5c\x14\xb9\x6e\x34\x1d\x3a\x91\x8b\xc2\xa9\x1f\xcc\x40\x80\x66\xb3\x20\xf0\x87\x53\x17\xf9\x33\x6f\xac\x74\xf2\x91\x1b\xfa\xd1\x78\x32\xf4\x7d\x34\x0b\xa6\xde\x58\xe9\xe4\xbb\xc1\x34\x8c\x86\xde\x18\x4d\x67\xe3\x59\x00\x42\x1f\x29\x59\x13\x7f\xe8\x78\x1e\x8a\x66\x91\xf6\x85\xeb\x4e\x87\x2e\xf2\x82\x59\xa4\x10\x26\x5e\xe0\x79\x43\xcf\x45\x33\x6f\x3a\x99\x29\x2e\x91\x3b\xf3\x67\x43\x47\x71\x99\xfa\x9e\x11\x16\x46\xc1\x24\x1c\x3a\xbe\x8f\x82\xd9\xcc\x0d\x80\x8f\xc6\x9e\x17\xf8\x43\x67\xea\xa2\x20\xf2\xdd\x08\x78\x9e\x87\x82\x68\x36\x8b\x86\xe1\x14\x45\xee\xd8\xf3\x14\xaf\x49\x10\xce\x14\x5d\x84\x26\x13\x7f\x16\x81\x8f\x10\xac\x33\x4a\x9d\x72\x4b\xc9\x12\x92\x5b\xc2\x78\x92\x18\xd8\x12\x5e\x5f\x3f\x7d\xf5\xe2\xd5\x9b\xeb\x6b\xb5\x36\xd4\x4a\xbb\x7a\xfc\xa8\x1b\x52\x6a\xa9\x7f\xaf\xb2\x32\x58\x82\x17\x48\x15\x0c\x83\x3a\x5d\xa8\x97\x5f\x4b\x3a\x37\xcb\x9c\xfc\xfa\xe6\xe7\x81\x5d\x34\x88\xdb\xf4\xdb\x7d\x4e\x87\x10\x7c\x7b\x22\x70\x2e\x50\x49\x0a\x8a\x63\x32\x80\xff\x80\x43\x00\xff\xe9\x07\xd0\x82\xb5\x8a\x0d\x2b\x69\x00\x54\xf5\xcf\xc5\xd0\x92\xff\x56\xef\x00\xbf\x8f\xc3\x21\x18\x87\x7f\x98\x91\xbb\x8b\xcb\x63\x1b\x7e\xdb\x64\x92\x7c\x05\x36\xec\x94\x1e\x7f\xd1\x86\x9f\x4a\x42\xd8\x57\x60\x43\xaa\xf4\x78\x98\x0d\xfa\x21\xe1\xf1\x36\x27\x4c\x22\xce\x6e\xc8\x61\x5b\xa8\x94\xbb\x65\xba\x8a\x01\x03\xb5\x22\xe5\x45\xb3\x07\x65\xeb\x0a\x84\x6e\xc8\x01\x2c\x97\x4b\x00\x7f\x10\x31\x2e\x08\x6c\x71\x00\x90\x3c\x4d\x29\xb9\x36\x79\x7c\x70\x51\xef\xcf\x77\xf6\x26\xd7\x88\xe0\x05\x61\xd7\x19\xbb\x4e\x39\x57\x44\x39\x2e\xc4\xa0\x65\x76\x8b\x4b\xb0\x2d\x29\x58\x02\x9d\x80\x45\x95\x81\x0d\x32\x8a\x79\x3e\x52\x04\xa3\xef\x94\xfb\xac\x9d\x01\x51\x2c\x33\xb9\x4d\x08\xf8\x16\xc0\xe1\xd1\x20\x67\x69\x77\x34\xc7\x45\xa3\x3d\x4a\x89\xfc\x6f\xce\xf3\xc1\x85\x1a\xfe\x08\xab\x01\x55\xfa\xf2\x1d\x52\xea\x0e\xb6\x25\x1d\x82\xc7\xd7\x2b\x8a\xd9\xcd\xe3\x8b\xcb\x93\x76\x09\x22\xaf\x9b\x1d\xce\x6c\x97\x03\x8a\x25\x65\xe9\x85\xbd\xa5\x5b\xbb\x2b\x12\x44\xbe\xc0\xf2\x05\x4b\x6b\xc4\xb6\xb2\xb1\x77\x4a\x94\x16\x02\xdd\x62\xba\x55\x11\x63\x30\x95\xbd\x48\xf2\x1f\xb3\x3d\x49\x06\xd3\x0b\xcb\x6a\x33\xca\x52\x6b\xf4\xd2\x9a\x4c\xdb\x2d\x98\x1a\x9f\x75\xa6\xb2\x2b\xb9\x46\xb1\xc4\x1f\xd3\xdf\x3f\xdf\xdb\x22\xc1\x92\xbc\xc4\xc5\x20\x17\x69\x77\xa2\x0b\x2e\x74\xfc\x50\xe3\x84\x5c\xa4\xcd\x3c\x0e\x81\x7e\xab\x27\xee\xe2\xb2\xe3\x41\xcb\x73\x05\x17\x27\x06\xdf\xa8\xb3\x44\xc6\xd9\x13\x96\x52\xa2\x19\xab\x03\x65\xa6\x5d\x5c\x97\x7f\x6d\x89\x82\x0a\x2e\x50\xc6\x98\x9a\x9a\xbd\xaa\x32\x7e\xd9\xe6\x2b\x52\x2a\xde\x4a\xa1\x8b\xc6\x97\xe3\xd6\xd3\x36\x8a\x8a\xdb\x16\xa5\xd6\x66\x34\xb2\x45\xa4\x39\x2e\x8c\x8c\xe7\xef\x5e\xbe\x50\xeb\x7b\x81\xcd\x81\xeb\xc3\xe7\x57\x7a\xa5\x48\x23\xbc\x92\x6a\x2f\xe7\xde\x2a\xfe\x00\xaf\x0c\x27\x35\x26\x16\x23\x7c\x05\x1b\xcb\xd5\x3a\xb0\x6b\x2e\x7b\xfe\x15\xa7\x02\xb3\x77\xbc\xe3\xd8\xfb\x66\xf6\xf9\xaf\xcf\xba\x33\xab\xd8\x7f\xb3\xd9\x26\x36\xdb\x92\xc8\x6d\xc9\x5a\x76\xf5\x09\x6d\x9b\xb4\x4b\xcc\x9e\x00\x35\x63\xfd\xe5\xa5\x90\xab\x59\x3c\xc2\xad\xe0\x36\x2a\xce\x4a\x51\x10\x92\x1c\xf3\xad\x06\x6c\xe4\x5b\x52\xca\x2c\xc6\xf4\xfa\x34\x49\x77\xd8\x26\x5c\x53\x5c\x88\x23\x7c\x0d\xb5\xd1\x64\x99\xe5\x47\x58\x0a\x68\x23\x95\xdb\x24\x21\xe5\xf5\x49\x5c\x6b\xac\x93\x7e\x76\x2a\x82\x18\xd9\x81\xdf\xc8\xea\x2d\x8f\x6f\x88\x1c\xc0\x9d\x5a\x4b\x6a\x59\x54\x29\x8c\xf2\x58\x07\x03\xda\x70\x21\x19\xce\x75\x1a\x9c\x9f\x42\xd0\x45\xf6\xb7\x00\x8e\x76\x02\x56\x93\xbf\x13\x88\x33\x95\x04\x3b\xdb\x44\x3b\xb7\xa3\x51\xcc\x99\xe0\x94\x20\xca\x53\x25\x5b\x27\xf8\x9a\xfa\xce\x62\x12\x53\x2e\xc8\x83\xb9\x68\xec\x53\x6c\x72\x22\x04\x4e\xbb\x8c\x48\x37\xaf\xe4\x22\x05\x4b\xf0\x1f\x6f\x5f\xfd\x82\x0a\x5c\x0a\x32\x20\x48\xed\xc0\x56\x64\xf6\xa5\xa9\x61\xa8\x73\x4e\x83\xd4\x3d\x77\xe4\x22\x6d\xe2\xa7\xbb\xee\x3b\x61\xa5\xce\xe9\xdf\x2c\x97\x60\xcb\x12\xb2\xce\x18\xe9\x04\x41\x37\x13\xf6\x62\xeb\xb2\x17\x5c\x19\xcb\xa4\x42\xbd\x37\x63\xaa\xc3\xc1\xc4\x9f\x0c\x55\xad\x3d\x89\xfc\xa0\x55\x46\x21\x73\x91\x57\x8b\xe3\x05\x7a\x97\x51\xf2\x02\x1f\x48\x39\xa8\x0f\x36\x9f\xc4\x1d\x92\x19\x25\x7a\x87\x13\xb2\x24\x44\xaa\xe0\x57\x07\x9d\x4f\x1f\xef\x46\x9f\xf6\x77\xa3\x4f\x87\x3b\x54\xb0\x14\x0e\x3b\x09\x62\xaf\xd2\xcc\x1c\x78\xd3\xb6\x06\xc9\x33\x66\x80\x7e\x0b\x5b\xf3\x32\xc7\x72\x0e\xac\x56\x56\x3b\x28\xb6\xab\x84\xe7\x38\x63\x62\x0e\x7e\x87\xca\xf5\x70\xa5\xfe\x89\xe1\x1f\xb5\x5b\x1a\x07\x69\x53\x0a\xc2\x70\x56\x5c\xc7\x38\xde\x90\xe4\x7a\x85\x05\x51\xae\x3e\xb6\xae\x2d\x8b\xfa\x66\xaa\x3c\x88\x2a\x3e\x88\x11\x39\x4a\x09\xdf\x91\x95\xe6\x38\x12\xa4\xbc\xcd\x62\x32\x92\xb9\x18\x79\xc8\x45\xee\xa8\x96\x58\x89\xfa\xee\x87\xd7\x6f\x7f\xfa\x67\xf0\x64\xe6\xba\x33\x2f\xf8\xae\x60\xf7\x7b\xc9\xf6\x53\x38\xb4\xc1\xb5\xa7\x3a\x50\x99\x8b\x39\x90\xe5\x96\xd8\xc0\xd1\x28\x21\x92\xc4\xf2\x0d\x91\x19\xc3\xc7\xe3\xb6\x0f\xa1\xe7\x43\x7b\xec\x5e\xe7\x03\x20\x4b\xcc\x44\x81\x4b\xc2\xa4\xe1\xdb\x8c\x75\xdd\x2e\x24\xce\x09\xbb\xd6\x95\xfe\xf5\xae\xaa\xd9\x3f\xbb\xa0\x0c\x95\xde\xc2\x24\x67\xa4\xfc\x0a\xd7\x53\x65\x98\x24\x65\x89\x33\xf6\xa5\x46\x19\xaa\xaf\xd7\xac\x1d\x96\xa4\xfc\x42\xa3\x34\x8d\x6e\xec\x7d\x85\x76\xc5\xb8\x94\xfc\x3a\xc1\xe5\xcd\x39\xab\xd4\x96\xa7\xb1\x92\x95\x53\x85\xac\x70\x94\x9d\x29\xe5\x2b\x4c\x91\x10\x14\xad\xb1\x90\xf4\xa0\x63\x5f\xb1\xba\xc6\x94\x7e\x35\xb6\x36\x15\x6c\x9b\xd4\x54\xf6\x87\x39\x2e\x3a\x3a\x51\x65\xb2\xe2\xc4\x45\xfe\x47\x2b\xc4\xb4\x3f\xe7\x6a\x7f\x68\x81\x1f\x8d\xf2\x6e\x0b\xc1\x52\x96\xd9\x6a\xab\x36\x98\xa7\x9c\xc9\x92\xd3\xb9\x69\xb7\x1d\x6b\xa2\xdc\x6e\xd0\xf5\x86\x13\x1b\x74\x64\x71\x18\xb4\x5a\xb5\x2d\x69\x68\x9a\x9c\x94\xac\x25\x3c\x9a\x4a\x43\x8c\x70\x92\x3c\xb1\xd8\xb4\x29\xfb\x74\x45\x7c\xbc\x3f\xc5\xbc\x38\xe8\xb6\xe8\x07\x08\x24\x2e\x53\x22\x97\x1f\xa0\x39\x9d\x7d\x80\x40\xb7\x46\x97\x1f\xe0\x07\x78\xf5\xaa\x20\xea\x60\x4d\x88\xda\x4a\x75\x11\xfc\x19\x5d\xee\x51\xa1\xda\x36\x3e\x27\x52\xa1\x3e\xf9\xf9\xf5\x5f\x10\x36\x1f\xe9\x8a\xdf\x0a\xca\xcf\xc9\x7a\xab\x31\xff\xa2\x5d\x3a\x5a\x74\xe8\x7f\x4e\xcc\x53\x85\x59\x4b\x39\x12\xf3\x8e\xab\xaa\xa7\xbb\x70\x54\x04\xbe\xc4\x85\xaa\x55\xda\x45\x02\x3b\xb3\x01\xe7\xaa\x3e\xb1\xda\x18\xc6\x18\xf0\xce\x24\x57\x38\xef\xe5\xe8\x13\x98\x6a\x6f\x69\xf1\xac\x4d\xea\x18\xf7\x37\x95\xdd\x5a\x5c\x9d\xec\x2c\x2c\x6d\x21\x78\xa6\xf2\xcb\xe0\x17\xdd\x84\x7f\xc9\x13\x72\x01\xe7\x56\xe6\xa9\xd1\xef\xba\x35\xd6\x2d\x29\x29\x3e\x1c\x1b\xfb\x0b\xbe\xcd\x52\x5d\x55\x63\x0a\x9e\xa9\xf2\x72\x7e\xa6\x8a\xb1\x18\x9b\x87\x36\xda\x4c\xb4\x0f\x6a\x77\x0e\x6d\x71\x17\xa7\x9c\x6f\x4e\xc0\x3a\x62\xab\x16\x84\xca\x08\x96\x5e\x59\xac\xa2\xb4\xdb\x4b\x6c\x1d\x51\xda\xc7\xe6\x39\x70\x8f\x47\x5e\x95\x99\xfe\x08\x03\x4d\xc6\x69\xf2\xdc\x5d\xff\x10\x6e\x2b\xd7\x19\x58\x65\x2c\x79\xad\x8e\xc4\x83\x17\x48\x1f\x8d\xad\x3c\x82\xb7\x92\xbf\xc6\xac\x9f\x94\x7a\xc7\x7d\xf5\xfa\xd4\x7c\x4a\x1d\xd8\x47\x6c\x95\x64\x2f\xba\x0b\xd1\xc8\x7c\xdd\xad\x9a\xdd\x21\x70\x7b\x5a\xd5\x2d\x19\xdb\x73\x0d\xed\x10\x7c\xea\x9b\xd7\xb4\x70\xce\x99\xd9\x20\xfc\x45\x73\x6b\xfb\x7a\xfd\x98\xda\x44\x83\x7a\xaa\xe5\xd4\x68\xdd\xd9\x54\x10\x67\x83\xc7\x49\x89\x53\x21\x71\x29\x1f\x0f\x4f\x9f\x9d\x40\xff\x53\x4c\xa7\x34\x3c\xd7\xe5\x3b\x16\x14\xd3\x2c\xbe\x39\x2f\xe4\x94\xda\x04\xf5\x5a\x60\x27\xd8\xaa\x30\xd0\x11\x11\x6f\x30\x4b\xc9\x79\x01\xba\x6b\x89\xf4\x49\x77\xb9\x3c\x1f\xdd\x17\xbd\x82\xbd\x6e\x1e\xa9\xc0\x18\x74\x5b\xd5\x8d\x5a\x00\xdc\x01\x42\x05\xe9\xcb\xe8\xe4\xa4\x87\x31\xd6\xfd\xe3\x63\xc6\x0f\x21\xd5\x61\x6b\x93\xf6\xa2\xb0\xdf\xa9\x69\xbc\xbd\x21\x25\xe9\x1c\xbb\xdb\x43\x65\x6f\xdd\xa6\x4d\xc8\x75\x2a\x31\xeb\x68\x2d\x74\xc7\x3a\x5b\x1f\xac\x15\x0d\xe5\xa1\x20\x70\x0e\x60\x2d\xd1\x6e\x54\x53\x2c\xe1\x1c\xe8\x13\xf9\x8f\x94\xe3\xa3\xc5\xdd\xb4\x39\x91\x28\x68\x26\x07\x70\x08\x2f\x7e\x77\xff\xb8\xb0\x59\xb0\xf4\xcb\x59\x78\x1d\x16\x75\x5b\xe9\x5e\x3e\xdd\xbe\xe7\x05\xf8\x16\xb8\x28\x3a\xce\x75\x76\x1b\xc1\x3e\xd3\xef\x04\x12\x84\x25\x16\xec\x68\x46\xba\xc1\xd4\x69\x9e\x9d\xeb\xcd\xd9\xb9\xce\xe0\x74\xda\x44\xd0\xc0\x0c\x1a\x6c\xe2\xa8\xbf\xaa\x3e\xc7\x25\xe1\xec\x71\xfd\x4d\xb6\xcf\xeb\xd1\xc9\x2c\xf1\x8d\xfd\xde\x31\xb7\xf9\xd4\x80\x93\xe4\x87\x5b\xc2\xe4\x8b\x4c\x48\xc2\x54\xd1\xfe\xec\xd5\xcb\x2a\xc7\xbd\xe0\x38\x21\x09\x1c\x9e\xff\x0a\x61\xa9\xdc\xd9\x64\x55\x36\x9c\xb7\x42\x52\x22\x7f\xa0\x44\x3d\x7e\x7f\xf8\x39\x19\x40\x4d\x66\x3e\xfe\x43\x6b\x05\x14\x5c\x3c\x8c\xc8\x29\xb8\xb0\x09\xd3\x1c\x17\x0f\xa4\x54\xa8\x36\xa9\xf1\xd0\x03\x89\x0d\x72\x4b\x7e\x77\xfa\xb3\xc0\x97\xb8\xa2\x7b\x15\xc2\xd6\x4c\x6c\x57\x79\x26\x1f\x4c\xea\x18\xfc\x8e\x5b\x8a\xfb\xfc\xd9\x23\x4f\x8b\x8e\x4b\xeb\x38\x7b\x38\x83\x26\x7c\x8f\xdd\xb3\xd9\x26\x1d\x9f\x3c\x80\x79\x8d\x72\xad\xe3\xdc\xd6\xac\xea\x28\xdf\x43\x5b\x61\x1c\x93\xd6\x0d\xe6\xfb\xe4\x56\x28\xc7\xc4\xdd\x56\xf3\x3d\x2c\xba\x88\xc7\x8c\x74\x0f\xfa\x1e\x7a\x3d\x7e\x4c\x26\xcb\x2c\xbf\x6f\x36\xca\x2c\x3f\x26\xb2\xba\xd3\xf7\xd0\x5a\x58\x7d\x16\x6d\x51\x7d\xa6\xca\x68\xda\xa1\x55\x7e\xd1\xbf\x9f\xbd\x5a\x86\x69\x91\x31\xa2\x2f\xb0\xfd\x29\x20\x48\xc8\x9a\x94\xd6\xad\xb2\xc5\xc8\x5c\x33\x7c\xb4\xd0\xd7\xbd\xf6\x4e\x82\x25\x5e\xc2\x4f\x40\x6c\xf8\xee\x2d\x91\x32\x63\xa9\xa8\xaa\xb3\xa1\x06\xfe\xac\x4e\xa2\xda\xba\xba\x61\x07\xd4\xd9\x40\xd5\x13\xe6\x1d\xdc\x99\x5b\x71\x49\x76\x6b\xae\x7b\xe0\x02\x82\x98\x62\x21\x96\xf0\xa3\xe3\xc2\xab\xc5\x28\xc9\x6e\x3b\x28\xa2\x12\xe4\x18\xd3\x1b\xf4\x75\xb6\x27\x09\xd0\xe7\x5c\xc7\x05\xb9\x33\x06\xb9\x74\x7c\x17\x7c\x74\x3c\xb7\xba\xf8\xb6\x58\x6d\xa5\xe4\x0c\x7c\xa7\x2b\xae\x25\xb4\xf5\x56\x89\xd9\x7e\xaf\x8f\xe3\x15\xf7\x55\xea\x98\x86\x9e\xbe\xd2\x45\x12\x67\xbd\xa5\x14\x14\x8e\x0f\xc4\x06\x27\x7c\x67\x7a\x84\xfa\x54\x6f\xee\x7b\x09\x90\x6c\x4b\x7d\x06\x70\x3c\xd7\x05\x04\x0b\xe2\x64\xcc\xe1\xdb\xe6\xa0\x3f\xaf\x58\x7f\x02\x8f\x57\xa9\x93\x96\xf8\xe0\x4c\x5d\xf7\xf1\xbc\x71\xd1\x10\x3c\xd6\x77\xb6\xf4\x90\xdf\x19\xaa\xfc\xa6\x8d\x7a\xe0\x25\x9c\xea\xd2\x8d\x37\x6e\xef\xe3\xa8\xe7\xdb\x8c\xec\xbe\xe7\xfb\x25\x74\x81\x0b\xfc\x10\xf8\x61\x7d\xbd\x82\x71\x46\x60\x9b\xf8\x64\xc9\x6f\xc8\x12\xc6\xdb\xb2\x24\x4c\x3e\x55\x36\xc2\x0a\xea\xd4\x17\x7a\x1a\x00\xcd\x18\x89\x71\xb1\x84\xda\x5d\x1d\xf0\x9f\x3c\x63\x35\xbc\x6d\xc8\x54\x73\x48\xb0\xdc\x90\x12\x54\xbf\x4e\x3d\xd7\x8d\xb1\x00\x2c\xe2\xac\x8c\x29\x01\xf1\x7e\x09\x3d\x1f\x82\xf8\x60\x7e\xcb\x25\x0c\xaa\xdb\x99\x15\x62\x81\xe5\xc6\x2a\x0e\x93\x25\x7c\xe9\xcd\x50\x08\xbc\x08\x7b\x68\x1c\x01\xfd\x8f\xab\xff\x8f\x82\x00\x78\x68\xea\x53\xe4\x8e\x91\x3b\xc6\x3e\xf0\x35\xdc\x53\x3e\x41\xd3\x00\x34\x00\x47\xbf\xba\xd4\x41\xee\x58\xfd\xd7\x67\xe5\x28\x36\x8e\xe1\xd7\x1b\x00\x1e\x8a\xbc\xf7\xbe\x87\x2d\x66\xc0\xb7\x59\x3b\xfe\xad\x83\xdc\xd9\x93\xbe\x7a\x33\xa0\x14\x3f\x29\x0a\x05\x81\xd6\xa5\xa3\x75\xa5\x24\xb0\xcc\xd0\x20\x7a\x46\x69\x65\xbf\xe6\x76\xac\x34\x8a\x3c\xc7\x7b\x1e\xe0\x8e\x96\x16\x63\xdf\xf1\x37\xa7\x54\x0e\xd1\x18\xcc\x8e\x34\xae\xe5\xb4\xee\xeb\xab\x68\xb3\x36\x9e\xae\x8c\xeb\x0b\xa8\x8c\x7f\x7e\x24\x04\x78\x5a\xeb\xf7\x96\xce\xa0\xa7\x33\xf0\x6f\x91\x7b\x82\x50\xcf\x50\xdf\x07\xa0\x9e\x51\x7a\xac\xf3\xb1\x9f\x35\xa8\x99\x91\x13\xf6\x6b\x76\xef\x4f\x08\xd7\xa2\x9f\xdb\xcb\x03\xf4\x96\x07\xf0\x37\xce\x09\xbd\x1d\x43\xfa\xd1\x5a\xfd\xe6\x36\x94\xc9\x79\x23\x93\xf4\x74\x0e\x3d\x9f\x4c\x73\xc2\xb6\x10\xec\x1d\x95\x02\xbb\x89\xb1\x49\xb0\xf5\xf5\x59\xb0\x33\xc9\x6f\x63\x7e\xd6\x94\xec\xc1\x9f\x5b\x21\xb3\xf5\xc1\x31\x6d\x0e\x90\x49\x92\x8b\xfa\xc5\xc9\xa5\xe3\xf9\x75\x0a\x56\x92\x2b\x86\x3b\xc7\x1b\xf9\x6d\x1e\xb3\x46\xfa\xd9\x16\x14\x4e\xf8\x17\x32\xec\xbf\x2d\xc7\x76\xb5\xeb\x58\xbc\x22\x72\x47\x08\xb3\x50\x0d\xb2\xfd\x0e\xc0\x62\xe3\xd5\xd4\x5a\xdc\x9e\x9a\xdb\xbe\x39\x49\xb2\x6d\x0e\x5a\x15\x42\xd7\x85\x57\xb5\xeb\x17\xa3\x8d\xd7\xe1\x3b\xea\x31\x3e\x21\xe8\xfe\x2d\x4e\xef\xcd\xf0\xea\x4b\x37\x0d\xb5\x29\xb4\x97\x38\x61\x47\xa2\xfa\xdf\x67\x36\x91\xff\xdd\xe6\x71\x24\xed\xcc\x66\x72\x6e\x13\xd9\xc3\xab\x23\x16\x0b\x45\x0c\xf6\xde\x12\x7a\x53\x08\x0e\xde\x12\x8e\x21\xd8\xfb\xfa\xe7\xe0\x1b\xe8\xe8\x3e\xb2\x71\x87\x4a\x33\x39\x47\x66\x05\x63\x0b\x6a\x83\xf2\xcc\xe4\x56\xaf\xed\xbb\xb9\x8d\x5d\xd9\x98\x4b\x27\x04\x2b\xca\xe3\x1b\x7b\x1d\x75\x17\x61\xc6\x8a\xad\x04\x7b\x27\xe7\x89\xfe\x43\x84\x6e\x3d\xd6\xb8\x2b\x2f\x1d\x1f\x50\x53\x9c\x3b\x52\xf7\x7b\x36\x4e\x08\x76\x4e\x58\xff\x71\x45\xbc\x21\xf1\xcd\x8a\x77\xfd\xb8\x10\x05\x66\x9d\x35\xed\xef\x69\xcf\xd3\xcf\xcc\x1f\x02\x00\x4b\x6c\xc7\x60\xc5\xc2\xb6\x58\x9b\xf8\xef\xb4\xb9\x0e\xe5\xff\x17\x63\x71\x79\x03\x94\xdc\x87\x98\x78\x34\xe5\x6d\x6a\x3e\xca\xd1\x99\x3d\x69\x76\x86\x3e\x35\x9b\x15\xe7\x3a\x81\xd6\x1d\x81\xbd\x33\x05\xc5\xc1\x09\xab\x77\x9a\xce\x4d\xb9\x4c\xd3\xb9\xf9\x02\xe5\xb8\xea\x99\x92\xb5\x34\x4f\xaa\x6a\x56\xbf\xb9\x33\x55\x3f\x75\x1e\xa6\xe9\xdc\xd4\xbb\x75\x6b\x43\xa5\x42\xed\x90\x2a\xd9\xdb\x59\x2d\xc5\x85\x33\x6e\x12\x25\xd6\x3c\xea\x63\xcb\x83\x73\xb9\x26\x80\x5f\x98\xc8\xa3\xd3\x89\xdc\x4e\x97\xfa\xf9\x49\x56\x82\xb7\xea\x3c\xd8\x09\xbe\xc6\xf3\xbd\x63\x67\x93\x60\x94\x8d\x2b\x4e\x93\xca\x5a\xce\x38\x68\x16\x85\xad\xe9\x7d\x3b\x8b\x7b\x6a\xf2\x4f\xa9\x58\x1d\xb9\xcf\x68\xd8\x3d\x90\xff\x2d\x1a\x3e\x37\xe1\x74\x5a\xc1\xee\xa9\xff\x6f\xd1\xef\x3d\xba\x67\x8a\x4f\xb6\x05\xfe\x16\x35\x7f\xa4\xfa\xe6\xe1\x29\x25\xed\xde\xc3\xdf\xa2\xdb\xbb\x32\xcb\x4f\xab\x66\x75\x27\xfe\x16\xcd\xde\xa0\xf3\xba\x1d\x37\x50\xfe\xef\x55\xec\xa6\x6f\xf3\x55\x18\xd6\x7f\x10\xa7\x8a\xa1\x4b\x58\x6d\x70\x8d\x9a\x76\xdf\xb5\xb1\xa1\x68\x9e\x36\x41\x1f\x4b\x37\x5a\xaf\x16\xa3\x4d\xd0\x6e\x24\x85\x45\x59\xd7\x80\x7d\x32\xdd\x65\x05\x9c\x55\xa5\xe1\xc9\x9b\xe5\x97\xe6\x93\x3c\xc8\x18\xe8\x5c\x88\xad\xea\x95\x87\x09\xaa\x3a\xb2\xad\xa8\x7e\x97\x4a\x69\xdf\xe7\x68\x17\x3c\xed\xf2\xea\x36\x62\x6d\xd9\xa6\x36\x58\xf3\xb2\x8f\xa5\x9b\xa6\x57\x3f\xbd\x7e\x3b\xaf\xb7\xdb\xaa\x2c\x68\xff\x18\x12\x9e\x60\x6e\xc8\x7a\x06\x9e\x17\x82\xa9\x84\x4d\x72\xfe\x42\x49\x4d\x53\xf6\x8c\x3f\x0d\xb9\x79\x39\xc9\xa0\xea\x2a\x5b\x0e\xee\x7e\xb1\xba\x84\x57\x35\xe4\x3e\x47\x57\x4f\x8b\xd1\x8a\x27\x87\xab\x47\x8f\x16\x23\xf3\xf7\xc4\xff\x13\x00\x00\xff\xff\x9f\xb2\xcd\xaf\x67\x3c\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 15463, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x58, 0x2b, 0xc9, 0x24, 0x60, 0xa9, 0xcc, 0x6, 0x37, 0x46, 0x6, 0xfe, 0xf5, 0x8c, 0xe5, 0x73, 0xfa, 0xe8, 0xd5, 0x68, 0xe2, 0x32, 0xce, 0xee, 0x32, 0x12, 0x9a, 0xa9, 0x8e, 0x5, 0x7c, 0x4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": {indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
